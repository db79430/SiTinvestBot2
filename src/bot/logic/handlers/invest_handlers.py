import asyncio

from aiogram.enums import ContentType, ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery, Message, ReplyKeyboardRemove,
)
from aiogram import F, Router

from src.bot.logic.register.successfully_register import send_message_chat_partner_handler
from src.bot.structures.keyboards.invest_kb import contact_us, invest_categories_kb, menu_kb
from src.bot.structures.keyboards.registration_kb import contacts_btn
from src.configuration import conf

invest_router = Router(name = 'invest_router')

WHO_PARTNER = 'AgACAgIAAxkBAAIDsWXuJKeydI7nhzcJ3F7yjJ5J4IdbAAKi2TEbRVZwS4IKS5ivRinFAQADAgADeQADNAQ'
HOW_WORK = 'AgACAgIAAxkBAAIDs2XuJU0zS475Z36e26Kuw0AcQoELAAKj2TEbRVZwS2TNjB05rvXJAQADAgADeQADNAQ'
PR = 'AgACAgIAAxkBAAIDtWXuJaDHNLTjF-njKX1pDD04KPMMAAKl2TEbRVZwS3E06ptv9ZdnAQADAgADeQADNAQ'
PARTNER_IMG = 'AgACAgIAAxkBAAIJbWYCZULeAAHT0-MC4mtK2AmUCphewgACiOAxG5AnEUhtxe7U2KM0iAEAAwIAA3kAAzQE'
INVEST_IMG = 'AgACAgIAAxkBAAIJqGYD4PYDqP-LgyR5uqyWbUL31nHNAAKU2TEbYNAhSMlV-inL_zzpAQADAgADeQADNAQ'
CHAT_ID = '-1002008269761'


@invest_router.message(F.text == '–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏–ø–æ—Ç–µ—á–Ω–æ–µ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ) üí∏')
async def invest_without_callback_button(message: Message, state: FSMContext):
    await message.answer_photo(photo = WHO_PARTNER)
    await message.answer_photo(photo = HOW_WORK)
    await message.answer_photo(photo = PR, reply_markup = contact_us)
    await message.answer(text = f"–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É üëáüèª\n "
                                f" üí¨–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π",
                         reply_markup = contact_us)


@invest_router.message(F.text == '–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ üíµ')
async def invest_with_callback_button(message: Message, state: FSMContext):
    await message.answer_photo(photo = INVEST_IMG, reply_markup = contact_us)
    await message.answer(text = f"–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É üëáüèª\n "
                                f" üí¨–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π",
                         reply_markup = contact_us)


@invest_router.message(F.text == '–°—Ç–∞—Ç—å –Ω–∞—à–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º üíº')
async def invest_with_callback_button(message: Message, state: FSMContext):
    await message.answer_photo(photo = PARTNER_IMG)
    await message.answer(text = f"–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É üëáüèª\n "
                                f"üí¨–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π",
                         reply_markup = contact_us)


@invest_router.message(F.text == '–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π üí¨')
async def invest_contact_application(message: Message, state: FSMContext):
    reg_data = await state.get_data()
    reg_name = reg_data.get('regTgName')
    reg_phone = reg_data['phone_number']
    if (reg_name and not reg_phone) or (reg_phone and not reg_name):
        await message.answer(text = "‚úÖ–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –°–∫–æ—Ä–æ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π",
                             reply_markup = menu_kb)
        await send_message_chat_partner_handler(message, state)
    else:
        await message.answer(text = f"‚ö†Ô∏èü§ñ –Ø –Ω–µ —É–≤–∏–¥–µ–ª –í–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.\n"
                                    f"\n   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, —á—Ç–æ–±—ã —è –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ",
                             reply_markup = contacts_btn)


@invest_router.message(F.text == "–ú–µ–Ω—é üíº")
async def handle_click_menu(message: Message, state: FSMContext):
    await message.answer(text = "–í—ã–±–µ—Ä–∏ –∏–Ω–µ—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëáüèª",
                         reply_markup = invest_categories_kb)


# @invest_router.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É üìù")
# async def invest_application(message: Message, state: FSMContext):
#     await message.answer(text = f"–û—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–ø–∏—à–∏, –∫–∞–∫ –º–æ–∂–Ω–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è? \n"
#                                 f"–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å?\n")
#     await state.set_state(RegisterMessage.text_message)


class CantParseEntities:
    pass


@invest_router.message(lambda message: not message.text.startswith("/"))
async def send_message_user(message: Message, state: FSMContext):
    reg_data = await state.get_data()
    reg_id = str(message.from_user.id)
    reg_name = reg_data.get('regTgName') or None
    reg_phone = reg_data.get('phone_number') or None
    reg_name = reg_data.get('regFullName')
    username = str(message.from_user.username)
    send_message_text_user = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {reg_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç\n"
        f"–§–ò–û: {reg_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {reg_phone}\n"
        f"C–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}\n"
    )
    try:
        if isinstance(message.text, str):
            await message.bot.send_message(conf.chat.chat_id, send_message_text_user, parse_mode = ParseMode.HTML)
    except CantParseEntities:
        await message.bot.send_message(conf.chat.chat_id, send_message_text_user, parse_mode = ParseMode.HTML)
