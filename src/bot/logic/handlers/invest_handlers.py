import asyncio

from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery, Message, ReplyKeyboardRemove,
)
from aiogram import F, Router

from src.bot.structures.fsm.register import RegisterGroup, RegisterMessage
from src.bot.structures.keyboards.registration_kb import application
from src.bot.structures.text.text import info_text
from src.configuration import conf

invest_router = Router(name = 'invest_router')

WHO_PARTNER = 'AgACAgIAAxkBAAIDsWXuJKeydI7nhzcJ3F7yjJ5J4IdbAAKi2TEbRVZwS4IKS5ivRinFAQADAgADeQADNAQ'
HOW_WORK = 'AgACAgIAAxkBAAIDs2XuJU0zS475Z36e26Kuw0AcQoELAAKj2TEbRVZwS2TNjB05rvXJAQADAgADeQADNAQ'
PR = 'AgACAgIAAxkBAAIDtWXuJaDHNLTjF-njKX1pDD04KPMMAAKl2TEbRVZwS3E06ptv9ZdnAQADAgADeQADNAQ'
CHAT_ID = '-1002008269761'


@invest_router.message(F.text == '–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏–ø–æ—Ç–µ—á–Ω–æ–µ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ) üí∏', RegisterGroup.select)
async def invest_without_callback_button(message: Message, state: FSMContext):
    await message.answer_photo(photo = WHO_PARTNER, caption = info_text)
    await message.answer_photo(photo = HOW_WORK)
    await message.answer_photo(photo = PR, reply_markup = application)


@invest_router.message(F.text == '–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ üíµ', RegisterGroup.select)
async def invest_with_callback_button(message: Message, state: FSMContext
                                      ):
    await message.answer(text = f"–¢—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç—å –ª—é–¥–µ–π\n"
                                         f"–û—Å—Ç–∞–≤–ª—è–π –∑–∞—è–≤–∫—É –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π, —á—Ç–æ–±—ã —Ä–∞—Å—Å–∫–∞–∑—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n"
                                  , reply_markup = application)


@invest_router.message(F.text == 'partner_with')
async def invest_with_callback_button(message: Message, state: FSMContext):
    await message.answer(text = "", reply_markup = application)


@invest_router.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ üìù")
async def invest_application(message: Message, state: FSMContext):
    await message.answer(text = f"–û—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–ø–∏—à–∏, –∫–∞–∫ –º–æ–∂–Ω–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è? \n"
                                f"–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å?\n")
    await state.set_state(RegisterMessage.text_message)


@invest_router.message(RegisterMessage.text_message)
async def invest_message_handler(message: Message, state: FSMContext):
    await message.answer(text = message.text, reply_markup = ReplyKeyboardRemove())
    await state.update_data(messageSend = message.text)
    await message.answer(text = f"–û–±—Ä–∞—â–µ–Ω–∏—è, —è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª.\n"
                                          f"–°–∫–æ—Ä–æ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π")
    reg_data = await state.get_data()
    reg_name = reg_data.get('regFullName')
    user_id = str(message.from_user.id)
    username = str(message.from_user.username)
    message_data = await state.get_data()
    message_send = message_data.get('messageSend')
    chat_message_text = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n"
        f"–§–ò–û: {reg_name}\n"
        f"C–æ–æ–±—â–µ–Ω–∏–µ: {message_send}\n"
    )
    await message.bot.send_message(CHAT_ID, chat_message_text)
