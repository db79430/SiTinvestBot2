import re
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from src.bot.structures.fsm.state import RegisterGroup
from .successfully_register import send_reg_data_tg_user_chat, send_reg_data_user_chat
from ...structures.keyboards.buttons import contacts_btn, invest_categories_kb, phone_numbers_btn
from .router import register_router

CATEGORIES_IMG = 'AgACAgIAAxkBAAM4Zjin3tSMuxVhd95CZFPBWsiXp3QAAh3aMRvhFMlJ96rmTrVRZHEBAAMCAAN5AAM1BA'
CATEGORIES_IMG_2 = 'AgACAgIAAxkBAAM6ZjioAAEROR02l8hLXuUI5vGMZaagAAI-2jEb4RTJSdEqQxQcuO-BAQADAgADeQADNQQ'


@register_router.message(F.text == 'üë©‚Äçüíª –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def register_confirmation(message: Message, state: FSMContext):
    await state.set_state(RegisterGroup.regFullName)
    await message.answer(' üìù–í–≤–µ–¥–∏ –∏–º—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:')


@register_router.message(RegisterGroup.regFullName)
async def register_full_name(message: Message, state: FSMContext):
    if re.findall('^[–∞-—è–ê-–Ø ]+$', message.text):
        await message.reply(
            '–°—É–ø–µ—Ä üôÇ! –ò–º—è —è –∑–∞–ø–∏—Å–∞–ª\n'
            'üì±–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º–æ–º tg\n',
            reply_markup = contacts_btn
        )
        await state.update_data(regFullName = message.text)
        await state.set_state(RegisterGroup.regPhone)
    else:
        await message.reply('–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è')
        return await message.answer(' üìù–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:')


@register_router.message(F.text == "üîî –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º–µ–Ω–µ–º tg")
async def register_tg_name(message: Message, state: FSMContext):
    reg_data = await state.get_data()
    reg_name = reg_data.get('regFullName')
    await state.set_state(RegisterGroup.regTgName)
    reg_tg_name = message.from_user.username
    msg = (
        f'\n‚úÖ –¢–≤–æ–π –Ω–∏–∫–Ω–µ–π–º: @{message.from_user.username}\n'
        f'\n‚úÖ –¢–≤–æ–µ –∏–º—è: {reg_name}\n'
        f'\nü§ó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n'
        f'\nüëáüèª –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n'
    )
    print(reg_tg_name)
    if reg_tg_name is None:
        await message.answer(text = f"ü•∫ –£–ø–ø–ø—Å —Ç–≤–æ–π tg –Ω–∏–∫–Ω–µ–π–º —Å–∫—Ä—ã—Ç.\n "
                                    f"\n –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º\n"
                                    f"\n –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º",
                             reply_markup = phone_numbers_btn)
    else:
        await message.answer(text = msg, reply_markup = ReplyKeyboardRemove())
        await send_reg_data_tg_user_chat(message, state)
        await send_sit_photo(message, state)


@register_router.message(F.contact)
async def register_phone(message: Message, state: FSMContext):
    await state.set_state(RegisterGroup.regPhone)
    reg_data = await state.get_data()
    reg_name = reg_data.get('regFullName')
    phone_number = str(message.contact.phone_number)
    start_param = reg_data.get('start_param')
    await state.update_data(start_param = start_param)
    await state.update_data(regTgName = message.from_user.username)
    msg = (
        f'\n‚úÖ –¢–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n'
        f'\n‚úÖ –¢–≤–æ–µ –∏–º—è: {reg_name}\n'
        f'\nü§ó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n'
        f'\nüëáüèª–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n'
    )
    await send_sit_photo(message, state)
    await send_reg_data_user_chat(message, state)
    await message.answer(text = msg, reply_markup = ReplyKeyboardRemove())


async def send_sit_photo(message: Message, state: FSMContext):
    await message.answer_photo(photo = CATEGORIES_IMG)
    await message.answer_photo(photo = CATEGORIES_IMG_2, reply_markup = invest_categories_kb)
