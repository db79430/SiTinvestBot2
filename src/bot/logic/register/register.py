import re
from aiogram import Bot, F
from aiogram.enums import ContentType, ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message, ReplyKeyboardMarkup, \
    ReplyKeyboardRemove, Update
from src.bot.structures.fsm.register import (
    RegisterGroup, )
from src.configuration import conf
from ...send_message import send_message
from ...structures.keyboards.invest_kb import invest_categories_kb
from .router import register_router
from ...structures.keyboards.registration_kb import contacts_btn
from ...structures.text.text import register_btn_text

CATEGORIES_IMG = 'AgACAgIAAxkBAAIDm2XuGgRJg3X8YU6hqBSKIssbdjG8AAKH2TEbRVZwS7nkLuVLMxOGAQADAgADeQADNAQ'
CHAT_ID = '-1002008269761'


@register_router.callback_query(F.data == 'register', RegisterGroup.confirmation)
async def register_confirmation(call: CallbackQuery, state: FSMContext):
    await state.set_state(RegisterGroup.regFullName)
    return await call.message.answer(' üìù–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:',
                                     reply_markup = ReplyKeyboardRemove())


@register_router.message(RegisterGroup.regFullName)
async def register_full_name(message: Message, state: FSMContext):
    # await state.clear()
    if re.findall('^[–∞-—è–ê-–Ø ]+$', message.text):
        await message.reply(
            '–°—É–ø–µ—Ä üôÇ! –ò–º—è —è –∑–∞–ø–∏—Å–∞–ª\n'
            'üì±–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º\n',
            reply_markup = contacts_btn
        )
        await state.update_data(regFullName = message.text)
        await state.set_state(RegisterGroup.regContacts)
        print("Value of FullName:", message.text)
    else:
        await message.reply('–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è')
        return await message.answer(' üìù–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:')


@register_router.message(F.contact)
async def handle_contact(message: Message, state: FSMContext):
    global phone_number
    reg_data = await state.get_data()
    reg_name = reg_data.get('regFullName')
    phone_number = str(message.contact.phone_number)
    user_id = str(message.contact.user_id)
    username = str(message.from_user.username)
    await state.update_data(
        phone_number = message.contact.phone_number,
        user_id = message.contact.user_id
    )
    await state.set_state(RegisterGroup.regContacts)

    msg = (
        f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n'
        f'üëáüèª–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n'
    )
    await message.answer(text = msg, reply_markup = ReplyKeyboardRemove())
    info = (
        # f'\n –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n'
        f'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ä–∞–∑–¥–µ–ª.\n'
    )
    await state.set_state(RegisterGroup.select)
    await message.answer_photo(photo = CATEGORIES_IMG, caption = info, reply_markup = invest_categories_kb)

    # Create a formatted message to send to the chat
    chat_message = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n"
        f"–§–ò–û: {reg_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
    )
    await message.bot.send_message(CHAT_ID, chat_message)

# @register_router.message(RegisterGroup.regContacts)
# async def successful_registration(message: Message, state: FSMContext):
#     await state.clear()
#     await state.set_state(RegisterGroup.regContacts)
#     msg = (
#         f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n'
#         # f'–ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –í–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏.\n'
#     )
#     await message.answer(text = msg, reply_markup = ReplyKeyboardRemove())
#     info = (
#         f'\n –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n'
#         f'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ä–µ–∑–¥–µ–ª.\n'
#     )
#     await state.set_state(RegisterGroup.select)
#     print("Value of Info:", RegisterGroup.select)
#     full_name = message.from_user.first_name
#     contact = message.from_user.contact
#     username = message.from_user.username
#     await message.send_message(CHAT_ID, f'f–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è{username}, –∫–æ–Ω—Ç–∞–∫—Ç{contact}, –§–ò–û{full_name}')
#     print("Value of Message:", full_name, contact, username)
#     await message.answer_photo(photo = CATEGORIES_IMG, caption = info, reply_markup = invest_categories_kb)
#     await send_message(message.from_user, message.text)
