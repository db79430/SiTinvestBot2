import re

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from src.bot.structures.fsm.register import (
    RegisterGroup,)
from ...structures.keyboards.info_kb import info_kb
from ...structures.keyboards.menu_btn import menu_btn
from .router import register_router
from src.configuration import conf



@register_router.callback_query(F.data == 'register')
async def register_confirmation(call: CallbackQuery, state: FSMContext):
    await state.set_state(RegisterGroup.regFullName)
    return await call.message.answer(' üìù–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:')


@register_router.message(RegisterGroup.regFullName)
async def register_full_name(message: Message, state: FSMContext):
    await state.clear()
    if re.findall('^[–∞-—è–ê-–Ø ]+$', message.text):
        await message.reply(
            '–°—É–ø–µ—Ä üôÇ! –ò–º—è —è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª\n'
            ' üì±–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7xxxxxxxxx):\n'
        )
        await state.update_data(regFullName=message.text)
        await state.set_state(RegisterGroup.regPhone)
    else:
        await message.reply('–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è')


@register_router.message(RegisterGroup.regPhone)
async def register_phone(message: Message, state: FSMContext):
    if re.findall(
        '^((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$', message.text
    ):
        await state.update_data(regPhone=message.text)
        await state.clear()
        reg_data = await state.get_data()
        reg_name = reg_data.get(RegisterGroup.regFullName)
        reg_phone = reg_data.get(RegisterGroup.regPhone)
        msg = (
            f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n'
            f'üìù –§–ò–û: {reg_name}\n'
            f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: {reg_phone}\n'
            f'–ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –í–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏.'
        )
        await message.answer(text=msg, reply_markup=info_kb)

        await message.reply_markup(menu_btn)
    else:
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω')


@register_router.message(RegisterGroup.regFullName, RegisterGroup.regPhone)
async def send_message(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.reply_to_message(conf.bot.chat, data=data, positive=False)
