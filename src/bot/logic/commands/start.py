"""This file represents a start logic."""

from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from src.bot.structures.fsm.state import RegisterGroup, UserClickButton
from src.bot.structures.keyboards.invest_kb import invest_categories_kb
from src.bot.structures.keyboards.registration_kb import register_kb
from src.configuration import conf
from src.db.db_commands import check_user_exists, is_registered_user

start_router = Router(name = 'start')

START_IMG = 'AgACAgIAAxkBAAIM0WYHELotGSRsX5XcN6RiD55xyd1TAAJF2TEb9jw4SMQGhbUeBqidAQADAgADeQADNAQ'
DOING_IMG = 'AgACAgIAAxkBAAIMz2YHEII3036FyBBhF28vb9UWqEX8AAJJ2TEb9jw4SPbiH30jRltwAQADAgADeQADNAQ'


@start_router.message(CommandStart())
async def start_wo_register(message: Message, state: FSMContext):
    await state.set_state(RegisterGroup.confirmation)
    state = await state.get_data()
    user_id = state.get('user_id')
    text = (f'\n –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –±–æ—Ç–∞ üíº\n'
            f'\n –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëáüèª\n')
    if not user_id:
        await message.answer_photo(photo = START_IMG)
        await message.answer(
            text = f'\n–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name} üëã!\n'
                   f'\n–ù–∞ —Å–≤—è–∑–∏ –±–æ—Ç –∏ –∫–æ–º–∞–Ω–¥–∞ SiTInvest.\n'
                   f'\nüèò –ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏ –≤ —Å—Ñ–µ—Ä–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n'
                   f'\nü§ñ –í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∏ —Å–º–æ–∂–µ—à—å '
                   f'\n–Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è\n'
                   f"\n–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ üòä\n",
            reply_markup = register_kb
        )
    else:
        await message.answer_photo(photo = DOING_IMG, caption = text,
                                   reply_markup = invest_categories_kb)


@start_router.message(F.photo)
async def start_photo(message: Message):
    photo_data = message.photo[-1].file_id
    await message.answer(f'{photo_data}')
